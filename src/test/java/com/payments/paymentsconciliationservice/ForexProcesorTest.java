package com.payments.paymentsconciliationservice;

import com.payments.paymentsconciliationservice.domain.ForexProcesor;
import com.payments.paymentsconciliationservice.domain.model.Forex;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


@Slf4j
public class ForexProcesorTest {
    ForexProcesor forexProcesor;

    @BeforeEach
    void setUp() {
        // Inicialización antes de cada test
        forexProcesor = new ForexProcesor();
    }

    @Test
    void filterRecords() {
        //Checking when the list is null.
        List<Forex> nullList = null;
        Exception nullException = assertThrows(IllegalArgumentException.class, () -> {
            forexProcesor.filterRecords(nullList);
        });
        // Assert: Verifica el mensaje de la excepción
        assertEquals("The object cannot be null or empty.", nullException.getMessage());

        //Checking when the list is empty.
        List<Forex> emptyList = new ArrayList<>();
        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {
            forexProcesor.filterRecords(emptyList);
        });
        // Assert: Verifica el mensaje de la excepción
        assertEquals("The object cannot be null or empty.", emptyException.getMessage());


        //Checking if the CreditDebitIndicator field is D. The list must be empty.
        List<Forex> forexList = new ArrayList<>();
        Forex record1 = mock(Forex.class);
        when(record1.getCreditDebitIndicator()).thenReturn("D");
        Forex record2 = mock(Forex.class);
        when(record2.getCreditDebitIndicator()).thenReturn("D");
        forexList.add(record1);
        forexList.add(record2);
        List<Forex> resultList = forexProcesor.filterRecords(forexList);
        assertEquals(0, resultList.size());

        //Checking if the CreditDebitIndicator field is C and date is different from today. The list must be empty.
        List<Forex> CforexList = new ArrayList<>();
        Forex recordC1 = mock(Forex.class);
        when(recordC1.getCreditDebitIndicator()).thenReturn("D");
        when(recordC1.getValueDate()).thenReturn("20250301");
        CforexList.add(recordC1);
        List<Forex> resultDList = forexProcesor.filterRecords(CforexList);
        assertEquals(0, resultList.size());

        //Checking if the CreditDebitIndicator field is C and currentt date.
        List<Forex> currentDateList = new ArrayList<>();
        Forex currentDateRecord1 = mock(Forex.class);
        when(currentDateRecord1.getCreditDebitIndicator()).thenReturn("C");
        when(currentDateRecord1.getValueDate()).thenReturn("20250320");
        currentDateList.add(currentDateRecord1);
        List<Forex> currentDayResultList = forexProcesor.filterRecords(currentDateList);
        assertEquals(1, currentDayResultList.size());
        assertEquals(currentDateRecord1, currentDayResultList.get(0));

    }

    @Test
    void parselineTest() {
        String linex3333333333x222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222x222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222227";
        String InvalidFormatLinex3333333333x222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222x222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222227";

        String shortline
        String EmptyLine = "";

        Forex forexExpected = new Forex();
        forexExpected.setCreditDebitIndicator("C");
        forexExpected.setTransactionReference("1111111111111111");
        forexExpected.setAccountNumber("11111111111111111111111111111111111");
        forexExpected.setAccountName("11111111111111111111111111111111111");
        forexExpected.setBankReference("1111111111111111");
        forexExpected.setValueDate("20250320");
        forexExpected.setCurrency("222");
        forexExpected.setTransactionAmount("2222222222222222222222222222222");
        forexExpected.setOrderOfAccountId("22222222222222222222222222222222222");
        forexExpected.setOrderOfName("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");
        forexExpected.setOrderOfAddress("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222211111111111111111111111111111111111111111111111111111111");
        forexExpected.setOrderOfAddress1("111111111111111111111111111111111111111111111112025020422222222222222222222222222222222222222222222222222");
        forexExpected.setOrderOfAddress2("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");
        forexExpected.setOrderOfAddress3("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");
        forexExpected.setOrderingBankAccountNumber("22222222222222222222222222222222222");
        forexExpected.setOrderingBankAddress("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");
        forexExpected.setOrderingBankAddress1("222222222222222222222222222222222111111111111111111111111111111111111111111111111111111111111111111111111");
        forexExpected.setOrderingBankAddress2("111111111111111111111111111111120250204222222222222222222222222222222222222222222222222222222222222222222");
        forexExpected.setOrderingBankAddress3("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222x");
        forexExpected.setPaymentDetails("3333333333x222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222x");
        forexExpected.setBankClearingID("22222222222222222222222222222222222");
        forexExpected.setBeneficiaryIDCodeType("22222222222222222222222222222222222");
        forexExpected.setRemitterReference("2222222222222222");
        forexExpected.setRemitterDrawerBillReference("2222222222222222");
        forexExpected.setCustomerNo("2222222222222222");
        forexExpected.setCustomerReference("22222222222222222222222222222222227");

        Forex forexResult = ForexProcesor.parseLine(line);
        assertEquals(forexExpected, forexResult);

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            ForexProcesor.parseLine(shortline);
        });
        // Assert: Verifica el mensaje de la excepción
        assertEquals("String is too short for expected fields.", exception.getMessage());

        Exception emptyException = assertThrows(IllegalArgumentException.class, () -> {
            ForexProcesor.parseLine(EmptyLine);
        });
        // Assert: Verifica el mensaje de la excepción
        assertEquals("String is too short for expected fields.", emptyException.getMessage());

        Exception invalidFormatException = assertThrows(IllegalArgumentException.class, () -> {
            ForexProcesor.parseLine(InvalidFormatLine);
        });
        // Assert: Verifica el mensaje de la excepción
        assertEquals("Invalid date format. Expected format: yyyyMMdd", invalidFormatException.getMessage());


    }

}
